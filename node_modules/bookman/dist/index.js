"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Database = exports.defaults = void 0;
var fs_1 = require("fs");
var lodash_get_1 = __importDefault(require("lodash.get"));
var lodash_has_1 = __importDefault(require("lodash.has"));
var lodash_set_1 = __importDefault(require("lodash.set"));
var lodash_unset_1 = __importDefault(require("lodash.unset"));
exports.defaults = {
    databaseName: "main",
    defaultDir: ".bookman",
    pretty: true,
};
var Database = /** @class */ (function () {
    function Database(options) {
        if (options === void 0) { options = exports.defaults; }
        var _this = this;
        this.getAll = function () { return _this.json; };
        this.fetchAll = this.getAll;
        this.map = this.getAll;
        this.all = this.getAll;
        this.get = function (key) { return (0, lodash_get_1.default)(_this.json, key); };
        this.fetch = this.get;
        this.has = function (key) { return (0, lodash_has_1.default)(_this.json, key); };
        this.options = options;
        if (!(0, fs_1.existsSync)("./".concat(this.options.defaultDir))) {
            (0, fs_1.mkdirSync)("./".concat(this.options.defaultDir));
        }
        if (!(0, fs_1.existsSync)("./".concat(this.options.defaultDir, "/").concat(this.options.databaseName, ".json"))) {
            (0, fs_1.writeFileSync)("./".concat(this.options.defaultDir, "/").concat(this.options.databaseName, ".json"), "{}");
        }
        this.getData();
    }
    Database.prototype.getData = function () {
        var content = (0, fs_1.readFileSync)("./".concat(this.options.defaultDir, "/").concat(this.options.databaseName, ".json"), "utf-8");
        var json = JSON.parse(content);
        this.json = json;
    };
    Database.prototype.setData = function (json) {
        var content = this.options.pretty
            ? JSON.stringify(json, null, 4)
            : JSON.stringify(json);
        (0, fs_1.writeFileSync)("./".concat(this.options.defaultDir, "/").concat(this.options.databaseName, ".json"), content);
        this.json = json;
    };
    Database.prototype.checkIfArray = function (key) {
        var savedData;
        savedData = this.get(key);
        if (typeof savedData === "undefined")
            savedData = [];
        if (!Array.isArray(savedData))
            throw new Error("value is not an array. key: ".concat(key, ", value: ").concat(savedData));
        return savedData;
    };
    Database.prototype.checkIfNumber = function (key) {
        var savedData;
        savedData = this.get(key);
        if (typeof savedData === "undefined")
            savedData = 0;
        if (typeof savedData != "number")
            throw new Error("value is not a number. key: ".concat(key, ", value: ").concat(savedData));
        return savedData;
    };
    Database.prototype.set = function (key, value) {
        (0, lodash_set_1.default)(this.json, key, value);
        this.setData(this.json);
        return (0, lodash_get_1.default)(this.json, key);
    };
    Database.prototype.push = function (key, value) {
        var savedData = this.checkIfArray(key);
        savedData.push(value);
        this.set(key, savedData);
        return savedData;
    };
    Database.prototype.pop = function (key) {
        var savedData = this.checkIfArray(key);
        var value = savedData.pop();
        this.set(key, savedData);
        return value;
    };
    Database.prototype.shift = function (key) {
        var savedData = this.checkIfArray(key);
        var value = savedData.shift();
        this.set(key, savedData);
        return value;
    };
    Database.prototype.unshift = function (key, value) {
        var savedData = this.checkIfArray(key);
        savedData.unshift(value);
        this.set(key, savedData);
        return savedData;
    };
    Database.prototype.add = function (key, value) {
        var savedData = this.checkIfNumber(key);
        savedData += value;
        this.set(key, savedData);
        return savedData;
    };
    Database.prototype.subtract = function (key, value) {
        var savedData = this.checkIfNumber(key);
        savedData -= value;
        this.set(key, savedData);
        return savedData;
    };
    Database.prototype.delete = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                (0, lodash_unset_1.default)(this.json, key);
                this.setData(this.json);
                return [2 /*return*/, this.json];
            });
        });
    };
    Database.prototype.destroy = function () {
        (0, fs_1.writeFileSync)("./".concat(this.options.defaultDir, "/").concat(this.options.databaseName, ".json"), "{}");
        this.json = {};
        return true;
    };
    return Database;
}());
exports.Database = Database;
